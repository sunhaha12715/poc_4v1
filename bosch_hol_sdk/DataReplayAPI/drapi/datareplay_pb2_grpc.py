# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import datareplay_pb2 as datareplay__pb2


class ReplayExecutorCommunicationStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRunningReplayJobState = channel.unary_unary(
                '/dspace.rtds.es.datareplay.ReplayExecutorCommunication/GetRunningReplayJobState',
                request_serializer=datareplay__pb2.Empty.SerializeToString,
                response_deserializer=datareplay__pb2.JobState.FromString,
                )
        self.GetRunningJobStates = channel.unary_unary(
                '/dspace.rtds.es.datareplay.ReplayExecutorCommunication/GetRunningJobStates',
                request_serializer=datareplay__pb2.Empty.SerializeToString,
                response_deserializer=datareplay__pb2.JobStates.FromString,
                )
        self.GetAllJobStates = channel.unary_unary(
                '/dspace.rtds.es.datareplay.ReplayExecutorCommunication/GetAllJobStates',
                request_serializer=datareplay__pb2.Empty.SerializeToString,
                response_deserializer=datareplay__pb2.JobStates.FromString,
                )
        self.GetAllReplayJobs = channel.unary_unary(
                '/dspace.rtds.es.datareplay.ReplayExecutorCommunication/GetAllReplayJobs',
                request_serializer=datareplay__pb2.Empty.SerializeToString,
                response_deserializer=datareplay__pb2.ReplayJobs.FromString,
                )
        self.AddReplayJobs = channel.unary_unary(
                '/dspace.rtds.es.datareplay.ReplayExecutorCommunication/AddReplayJobs',
                request_serializer=datareplay__pb2.ReplayJobs.SerializeToString,
                response_deserializer=datareplay__pb2.Response.FromString,
                )
        self.DeleteAllReplayJobs = channel.unary_unary(
                '/dspace.rtds.es.datareplay.ReplayExecutorCommunication/DeleteAllReplayJobs',
                request_serializer=datareplay__pb2.Empty.SerializeToString,
                response_deserializer=datareplay__pb2.Response.FromString,
                )
        self.DeleteFinishedJobs = channel.unary_unary(
                '/dspace.rtds.es.datareplay.ReplayExecutorCommunication/DeleteFinishedJobs',
                request_serializer=datareplay__pb2.Empty.SerializeToString,
                response_deserializer=datareplay__pb2.Response.FromString,
                )
        self.DeletePendingJobs = channel.unary_unary(
                '/dspace.rtds.es.datareplay.ReplayExecutorCommunication/DeletePendingJobs',
                request_serializer=datareplay__pb2.Empty.SerializeToString,
                response_deserializer=datareplay__pb2.Response.FromString,
                )
        self.DeleteReplayJobs = channel.unary_unary(
                '/dspace.rtds.es.datareplay.ReplayExecutorCommunication/DeleteReplayJobs',
                request_serializer=datareplay__pb2.JobDeleteDescription.SerializeToString,
                response_deserializer=datareplay__pb2.Response.FromString,
                )
        self.GetVolumeInfo = channel.unary_unary(
                '/dspace.rtds.es.datareplay.ReplayExecutorCommunication/GetVolumeInfo',
                request_serializer=datareplay__pb2.Empty.SerializeToString,
                response_deserializer=datareplay__pb2.Volumes.FromString,
                )


class ReplayExecutorCommunicationServicer(object):
    """Missing associated documentation comment in .proto file"""

    def GetRunningReplayJobState(self, request, context):
        """Returns the job state of the job currently in the step replay
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRunningJobStates(self, request, context):
        """Returns the state of all jobs in either download, replay, or upload state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllJobStates(self, request, context):
        """Returns the jobs states of all jobs known to the executor
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllReplayJobs(self, request, context):
        """Returns a list of all jobs known to the executor (including finished and pending)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddReplayJobs(self, request, context):
        """Adds replay jobs to the executor
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAllReplayJobs(self, request, context):
        """Deletes all jobs (pending/running/finished) - like a reset
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFinishedJobs(self, request, context):
        """Delete all finished (or cancelled/aborted) jobs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePendingJobs(self, request, context):
        """Delete all pending jobs from the queue
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteReplayJobs(self, request, context):
        """Delete all jobs whose job names match the JobDeleteDescription
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVolumeInfo(self, request, context):
        """Returns a list of all available volumes including the total size and free space
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReplayExecutorCommunicationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRunningReplayJobState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRunningReplayJobState,
                    request_deserializer=datareplay__pb2.Empty.FromString,
                    response_serializer=datareplay__pb2.JobState.SerializeToString,
            ),
            'GetRunningJobStates': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRunningJobStates,
                    request_deserializer=datareplay__pb2.Empty.FromString,
                    response_serializer=datareplay__pb2.JobStates.SerializeToString,
            ),
            'GetAllJobStates': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllJobStates,
                    request_deserializer=datareplay__pb2.Empty.FromString,
                    response_serializer=datareplay__pb2.JobStates.SerializeToString,
            ),
            'GetAllReplayJobs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllReplayJobs,
                    request_deserializer=datareplay__pb2.Empty.FromString,
                    response_serializer=datareplay__pb2.ReplayJobs.SerializeToString,
            ),
            'AddReplayJobs': grpc.unary_unary_rpc_method_handler(
                    servicer.AddReplayJobs,
                    request_deserializer=datareplay__pb2.ReplayJobs.FromString,
                    response_serializer=datareplay__pb2.Response.SerializeToString,
            ),
            'DeleteAllReplayJobs': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAllReplayJobs,
                    request_deserializer=datareplay__pb2.Empty.FromString,
                    response_serializer=datareplay__pb2.Response.SerializeToString,
            ),
            'DeleteFinishedJobs': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFinishedJobs,
                    request_deserializer=datareplay__pb2.Empty.FromString,
                    response_serializer=datareplay__pb2.Response.SerializeToString,
            ),
            'DeletePendingJobs': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePendingJobs,
                    request_deserializer=datareplay__pb2.Empty.FromString,
                    response_serializer=datareplay__pb2.Response.SerializeToString,
            ),
            'DeleteReplayJobs': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteReplayJobs,
                    request_deserializer=datareplay__pb2.JobDeleteDescription.FromString,
                    response_serializer=datareplay__pb2.Response.SerializeToString,
            ),
            'GetVolumeInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVolumeInfo,
                    request_deserializer=datareplay__pb2.Empty.FromString,
                    response_serializer=datareplay__pb2.Volumes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dspace.rtds.es.datareplay.ReplayExecutorCommunication', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReplayExecutorCommunication(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def GetRunningReplayJobState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dspace.rtds.es.datareplay.ReplayExecutorCommunication/GetRunningReplayJobState',
            datareplay__pb2.Empty.SerializeToString,
            datareplay__pb2.JobState.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRunningJobStates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dspace.rtds.es.datareplay.ReplayExecutorCommunication/GetRunningJobStates',
            datareplay__pb2.Empty.SerializeToString,
            datareplay__pb2.JobStates.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllJobStates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dspace.rtds.es.datareplay.ReplayExecutorCommunication/GetAllJobStates',
            datareplay__pb2.Empty.SerializeToString,
            datareplay__pb2.JobStates.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllReplayJobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dspace.rtds.es.datareplay.ReplayExecutorCommunication/GetAllReplayJobs',
            datareplay__pb2.Empty.SerializeToString,
            datareplay__pb2.ReplayJobs.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddReplayJobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dspace.rtds.es.datareplay.ReplayExecutorCommunication/AddReplayJobs',
            datareplay__pb2.ReplayJobs.SerializeToString,
            datareplay__pb2.Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAllReplayJobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dspace.rtds.es.datareplay.ReplayExecutorCommunication/DeleteAllReplayJobs',
            datareplay__pb2.Empty.SerializeToString,
            datareplay__pb2.Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteFinishedJobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dspace.rtds.es.datareplay.ReplayExecutorCommunication/DeleteFinishedJobs',
            datareplay__pb2.Empty.SerializeToString,
            datareplay__pb2.Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeletePendingJobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dspace.rtds.es.datareplay.ReplayExecutorCommunication/DeletePendingJobs',
            datareplay__pb2.Empty.SerializeToString,
            datareplay__pb2.Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteReplayJobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dspace.rtds.es.datareplay.ReplayExecutorCommunication/DeleteReplayJobs',
            datareplay__pb2.JobDeleteDescription.SerializeToString,
            datareplay__pb2.Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVolumeInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dspace.rtds.es.datareplay.ReplayExecutorCommunication/GetVolumeInfo',
            datareplay__pb2.Empty.SerializeToString,
            datareplay__pb2.Volumes.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
